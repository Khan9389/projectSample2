package common.springsecurity;

import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class MemberVO implements UserDetails {

	private static final long serialVersionUID = -513243367094871788L;

	/* 회원 아이디 */
	private String bnMbrId;

	/* 비밀번호 */
	private String pwdNo;

	/* 입력된 비밀번호 */
	private String inputPwdNo;

	/* 회원 이름 */
	private String mbrNm;

	/* 비밀번호 초기화 여부 */
	private String pwnoInitYn;

	/* 비밀번호 오류 횟수 */
	private String pwerrCnt;

	/* 로그인 가능 여부 */
	private String lginAvlYn;

	/* 마스터 회원 여부 */
	private String mstMbrYn;

	/* 퇴사 회원 여부 */
	private String actvYn;

	/* 계정이 가지고 있는 권한목록 */
	private Collection<SimpleGrantedAuthority> authorities;
		
	@Override
	public String getPassword() {
		return getPwdNo();
	}

	@Override
	public String getUsername() {
		return getMbrNm();
	}
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {  // 계정이 갖고있는 권한목록을 리턴한다.
		return authorities;
	}

	@Override
	public boolean isAccountNonExpired() {  // 계정이 만료되지 않았는지를 리턴(true를 리턴하면 만료되지 않음을 의미)
		return true; // 체크를 하지 않겠다는 의미
	}

	@Override
	public boolean isAccountNonLocked() {  // 계정이 잠겨있지 않은지를 리턴(true를 리턴하면 계정이 잠겨있지 않음을 의미)
		return true; // 체크를 하지 않겠다는 의미
	}

	@Override
	public boolean isCredentialsNonExpired() {  // 계정의 패스워드가 만료되지 않았는지를 리턴(true를 리턴하면 패스워드가 만료되지 않음을 의미)
		return true; // 체크를 하지 않겠다는 의미
	}

	@Override
	public boolean isEnabled() { // 계정이 사용가능한 계정인지를 리턴한다(true를 리턴하면 사용가능한 계정인지를 의미)
		return true; // 체크를 하지 않겠다는 의미
	}

}
